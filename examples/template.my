resultValue = ""
//test using array
arr = [
	{ "key" => "key1", "value" => "value1" },
	{ "key" => "key2", "value" => "value2" },
	{ "key" => "key3", "value" => "value3" }
]

//use parseFiles(), write to a string
template.parseFiles("./examples/looping.tmpl").execute(resultValue, arr)
println('{resultValue}')

//use parseFiles(), write to a file
file = newFile("./examples/outTemplate.log", "a+")
template.parseFiles("./examples/looping.tmpl").execute(file, arr)

//use parse()
//Note here: we need to use "{{-" and "-}}" to remove the newline from the output
template.new("array").parse(`Looping
{{- range . }}
	key={{ .key }}, value={{ .value -}}
{{- end }}
`).execute(resultValue, arr)
println('{resultValue}')

//test using hash
hs = { "key" => "key1", "value" => "value1" }
template.new("hash").parse(`key={{.key }}, value={{ .value -}}`).execute(resultValue, hs)
println('{resultValue}')

//test using integer
iValue = 15
template.new("int").parse(`value={{.}}`).execute(resultValue, iValue)
println('{resultValue}')

//test using float
fValue = 15.2
template.new("float").parse(`value={{.}}`).execute(resultValue, fValue)
println('{resultValue}')

//test using boolean
bValue = true
template.new("bool").parse(`value={{.}}`).execute(resultValue, bValue)
println('{resultValue}')

//test using time
tValue = newTime()
template.new("time").parse(`value={{.}}`).execute(resultValue, tValue)
println('{resultValue}')

//test using string
sValue = "world"
template.new("string").parse(`value={{.}}
value={{printf "%q" . -}}
`).execute(resultValue, sValue)
println('{resultValue}')

//test using Nil
nValue = nil
template.new("Nil").parse(`value={{.}}`).execute(resultValue, nValue)
println('{resultValue}')


//test template.funcs()
templateText = `
Input: {{printf "%q" .}}
Output 0: {{title .}}
Output 1: {{title . | printf "%q"}}
Output 2: {{printf "%q" . | title}}

Output 3: {{upper .}}
Output 4: {{upper . | printf "%q"}}
Output 5: {{printf "%q" . | upper}}
`

template.new("titleTest").funcs(
{
	"title" => fn(x){strings.title(x)},
	"upper" => fn(x){strings.upper(x)}
}
).parse(templateText).execute(resultValue, "the go programming language")
println('{resultValue}')


envText = `ENVIRONMENT PATH: {{getenv .}}`
template.new("titleTest").funcs(
{
	"getenv" => fn(x){os.getenv(x)}
}
).parse(envText).execute(resultValue, "PATH")
println('{resultValue}')
